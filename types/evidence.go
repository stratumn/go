// Copyright 2017 Stratumn SAS. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package types

import (
	"github.com/pkg/errors"
	"github.com/stratumn/go-chainscript"
)

// EvidenceSlice is a slice of evidences.
type EvidenceSlice []*chainscript.Evidence

// AddEvidence adds an evidence to the slice.
func (e *EvidenceSlice) AddEvidence(evidence *chainscript.Evidence) error {
	if e.GetEvidence(evidence.Backend, evidence.Provider) != nil {
		return errors.Errorf("evidence already exist for backend %s and provider %s", evidence.Backend, evidence.Provider)
	}

	*e = append(*e, evidence)
	return nil
}

// GetEvidence gets an evidence from a backend's provider.
func (e EvidenceSlice) GetEvidence(backend, provider string) *chainscript.Evidence {
	for _, evidence := range e {
		if evidence.Backend == backend && evidence.Provider == provider {
			return evidence
		}
	}

	return nil
}

// FindEvidences find all evidences generated by a specified backend.
func (e EvidenceSlice) FindEvidences(backend string) (res EvidenceSlice) {
	for _, evidence := range e {
		if evidence.Backend == backend {
			res = append(res, evidence)
		}
	}

	return res
}
